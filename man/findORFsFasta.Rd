% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_ORFs.R
\name{findORFsFasta}
\alias{findORFsFasta}
\title{Finds Open Reading Frames in fasta files.}
\usage{
findORFsFasta(filePath, startCodon = startDefinition(1),
  stopCodon = stopDefinition(1), longestORF = FALSE,
  minimumLength = 0, is.circular = FALSE)
}
\arguments{
\item{filePath}{(character) Path to the fasta file. Sequences must be
uppercase! Alternative if lowercase, set start and stop codons to "atg" etc.}

\item{startCodon}{(character) Possible START codons to search for. Check
[startDefinition()] for helper function.}

\item{stopCodon}{(character) Possible STOP codons to search for. Check
[stopDefinition()] for helper function.}

\item{longestORF}{(logical) Default FALSE. When TRUE will only report the
longest ORFs per seqlevel (1 in + and in in - direction),
all smaller ORFs will be ignored.
When FALSE will report all possible ORFs in all three reading frames.
If you want longest ORF per unique (seqname, strand, stopcodon) combination,
use \code{\link{longestORFs}}}

\item{minimumLength}{(integer) Default is 0. Minimum length of ORF, without
counting 3bp for START and STOP codons. For example minimumLength = 8 will
result in size of ORFs to be at least START + 8*3 (bp) + STOP = 30 bases.
Use this param to restrict search.}

\item{is.circular}{(logical) Whether the genome in filePath is circular.
Prokaryotic genomes are usually circular. Be carefull if you want to
extract sequences, remember that seqlengths must be set, else it does not
know what last base in sequence is before loop ends!}
}
\value{
(GRanges) object of ORFs mapped from fasta file. Positions are
relative to the fasta file.
}
\description{
Searches through each fasta header and reports all ORFs found for BOTH
sense (+) and antisense strand (-) in all frames. Name of the header will
be used as seqnames of reported ORFs.
Each fasta header is treated separately, and name of the sequence will
be used as seqname in returned GRanges object. This supports circluar
genomes.
}
\details{
Remember if you have a fasta file of transcripts (transcript coordinates),
delete all negative stranded ORFs afterwards by:
orfs <- orfs[strandBool(orfs)] # negative strand orfs make no sense then
Seqnames are created from header by format: >name info, so name must be
first after "biggern than" and space between name and info.
}
\examples{
# location of the example fasta file
example_genome <- system.file("extdata", "genome.fasta", package = "ORFik")
findORFsFasta(example_genome)

}
\seealso{
[findORFs()], [findMapORFs()],
[startDefinition()], [stopDefinition()]

Other findORFs: \code{\link{findMapORFs}},
  \code{\link{findORFs}}, \code{\link{startDefinition}},
  \code{\link{stopDefinition}}
}
\concept{findORFs}
