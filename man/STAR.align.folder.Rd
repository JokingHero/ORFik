% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/STAR.R
\name{STAR.align.folder}
\alias{STAR.align.folder}
\title{Align all libraries in folder with STAR}
\usage{
STAR.align.folder(
  input.dir,
  output.dir,
  index.dir,
  star.path = STAR.install(),
  fastp = install.fastp(),
  paired.end = "no",
  steps = "tr-ge",
  adapter.sequence = "auto",
  min.length = 15,
  trim.front = 0,
  alignment.type = "Local",
  max.cpus = min(90, detectCores() - 1),
  wait = TRUE,
  include.subfolders = "n",
  script.folder = system.file("STAR_Aligner", "RNA_Align_pipeline_folder.sh", package =
    "ORFik"),
  script.single = system.file("STAR_Aligner", "RNA_Align_pipeline.sh", package =
    "ORFik")
)
}
\arguments{
\item{input.dir}{path to fast files to align, can either be
fasta files (.fastq, .fq, .fa etc) or compressed files with .gz.
Also either paired end or single end reads.}

\item{output.dir}{directory to save indices, default:
paste0(dirname(arguments[1]), "/STAR_index/"), where arguments is the
arguments input for this function.}

\item{index.dir}{path to STAR index folder. Path returned from ORFik function
STAR.index, when you created the index folders.}

\item{star.path}{path to STAR, default: STAR.install(),
if you don't have STAR installed at default location, it will install it there,
set path to a runnable star if you already have it.}

\item{fastp}{path to fastp trimmer, default: install.fastp(), if you
have it somewhere else already installed, give the path. If you are not on linux
and you want to trim, use your favorite trimmer and give the output files from that
trimmer as input.dir here.}

\item{paired.end}{default "no", alternative "yes". Will auto detect
pairs by names.}

\item{steps}{a character, default: "tr-ge", trimming --> genome alignment\cr
steps of depletion and alignment wanted:
If not "all", a subset of these ("tr-ph-rR-nc-tR-ge")\cr
In bash script it it reformated to this style:
(trimming and genome do: "tr-ge", write "all" to get all: "tr-ph-rR-nc-tR-ge")
tr: trim, ph: phix, rR: rrna, nc: ncrna, tR: trna, ge: genome)\cr
the step where you align to the genome is usually always included, unless you
are doing pure contaminant analysis.
For Ribo-seq and TCP(RCP-seq) you should do rR (ribosomal RNA depletion),
so when you made the
STAR index you need the rRNA step (usually just download a Silva rRNA database
for SSU&LSU at: https://www.arb-silva.de/)}

\item{adapter.sequence}{"auto"}

\item{min.length}{15, minimum length of reads to pass filter.}

\item{trim.front}{0, default trim 0 bases 5'. For Ribo-seq set use 0.
Ignored if tr (trim) is not one of the arguments in "steps"}

\item{alignment.type}{default: "Local": standard local alignment with soft-clipping allowed,
"EndToEnd" (global): force end-to-end read alignment, does not soft-clip.}

\item{max.cpus}{integer, default: min(90, detectCores() - 1),
number of threads to use. Default is minimum of 90 and maximum cores - 1}

\item{wait}{a logical (not \code{NA}) indicating whether the \R
    interpreter should wait for the command to finish, or run it
    asynchronously.  This will be ignored (and the interpreter will
    always wait) if \code{intern = TRUE}. When running the command
    asynchronously, no output will be displayed on the \code{Rgui}
    console in Windows (it will be dropped, instead).}

\item{include.subfolders}{"n" (no), do recursive search downwards for fast files if "y".}

\item{script.folder}{location of STAR index script,
default internal ORFik file. You can change it and give your own if you
need special alignments.}

\item{script.single}{location of STAR single file alignment script,
default internal ORFik file. You can change it and give your own if you
need special alignments.}
}
\value{
output.dir, can be used as as input in ORFik::create.experiment
}
\description{
Does either all files as paired end or single end,
so if you have mix, split them in two different folders.\cr
#' If STAR halts at .... loading genome, it means the STAR
index was aborted early, then you need to run:
STAR.remove.crashed.genome(), with the genome that crashed, and rerun.
}
\details{
Can only run on unix systems (Linux and Mac), and requires
minimum 30GB memory on genomes like human, rat, zebrafish etc.
}
\examples{
# Use your own paths for annotation or the ORFik way

## use ORFik way:
output.dir <- "/Bio_data/references/Human"
# arguments <- getGenomeAndAnnotation("Homo sapiens", output.dir)
# index <- STAR.index(arguments, output.dir)
# STAR.align.folder("data/raw_data/human_rna_seq", "data/processed/human_rna_seq",
#                    index, paired.end = "no")
}
\seealso{
Other STAR: 
\code{\link{STAR.align.single}()},
\code{\link{STAR.index}()},
\code{\link{STAR.install}()},
\code{\link{STAR.remove.crashed.genome}()},
\code{\link{getGenomeAndAnnotation}()},
\code{\link{install.fastp}()}
}
\concept{STAR}
